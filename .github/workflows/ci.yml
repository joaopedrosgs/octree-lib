name: CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build-and-test:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Ubuntu Latest GCC"
            os: ubuntu-latest
            cc: "gcc"
            cxx: "g++"
            build_type: "Release"

          - name: "Ubuntu Latest Clang"
            os: ubuntu-latest
            cc: "clang"
            cxx: "clang++"
            build_type: "Release"

          - name: "macOS Latest"
            os: macos-latest
            cc: "clang"
            cxx: "clang++"
            build_type: "Release"

          - name: "Windows Latest MSVC"
            os: windows-latest
            cc: "cl"
            cxx: "cl"
            build_type: "Release"

          - name: "Ubuntu Debug Build"
            os: ubuntu-latest
            cc: "gcc"
            cxx: "g++"
            build_type: "Debug"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.14.x'

      - name: Configure CMake
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}

      - name: Build
        run: cmake --build build --config ${{ matrix.config.build_type }}

      - name: Run Tests
        working-directory: build
        run: ctest -C ${{ matrix.config.build_type }} --output-on-failure --verbose

      - name: Build Examples
        run: cmake --build build --config ${{ matrix.config.build_type }} --target basic_usage && cmake --build build --config ${{ matrix.config.build_type }} --target spatial_queries && cmake --build build --config ${{ matrix.config.build_type }} --target custom_data && cmake --build build --config ${{ matrix.config.build_type }} --target raycast_example && cmake --build build --config ${{ matrix.config.build_type }} --target voxel_pathfinding && cmake --build build --config ${{ matrix.config.build_type }} --target frustum_culling

  sanitizers:
    name: Sanitizers (Ubuntu)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sanitizer: [address, undefined, thread]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2

      - name: Install Clang
        run: |
          sudo apt-get update
          sudo apt-get install -y clang

      - name: Configure with ${{ matrix.sanitizer }} sanitizer
        env:
          CC: clang
          CXX: clang++
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer"

      - name: Build
        run: cmake --build build

      - name: Run Tests
        working-directory: build
        run: ctest --output-on-failure

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2

      - name: Install lcov
        run: sudo apt-get update && sudo apt-get install -y lcov

      - name: Configure with coverage
        env:
          CC: gcc
          CXX: g++
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_FLAGS="--coverage"

      - name: Build
        run: cmake --build build

      - name: Run Tests
        working-directory: build
        run: ctest --output-on-failure

      - name: Generate coverage report
        working-directory: build
        run: |
          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' '*/tests/*' '*/examples/*' '*/benchmarks/*' '_deps/*' --output-file coverage.info
          lcov --list coverage.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./build/coverage.info
          fail_ci_if_error: false
          verbose: true

  benchmarks:
    name: Run Benchmarks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2

      - name: Configure
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build Benchmarks
        run: cmake --build build --target octree_benchmarks

      - name: Run Quick Benchmarks
        working-directory: build/benchmarks
        run: |
          ./octree_benchmarks --benchmark_filter=BM_Insert/100 --benchmark_min_time=0.1s
          ./octree_benchmarks --benchmark_filter=BM_VoxelWorld_RaycastFirst --benchmark_min_time=0.1s

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2

      - name: Install clang-tidy
        run: sudo apt-get update && sudo apt-get install -y clang-tidy

      - name: Configure
        run: cmake -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Run clang-tidy (non-blocking)
        working-directory: build
        continue-on-error: true
        run: |
          find ../include -name "*.hpp" | xargs clang-tidy -p .

  formatting:
    name: Check Formatting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format

      - name: Check formatting (non-blocking)
        continue-on-error: true
        run: |
          find include tests examples benchmarks -name "*.hpp" -o -name "*.cpp" | xargs clang-format --dry-run --Werror
